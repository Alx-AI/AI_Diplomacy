# AI Diplomacy Codebase Analysis (Core Logic Modules) - Updated

This document provides an analysis of key Python modules within the `ai_diplomacy` package, focusing on their roles, functions, interdependencies, and implementation status.

---

## 1. Module Status

### COMPLETED MODULES:

#### 1.1. `game_history.py` (COMPLETE)
**Goal:** To structure, store, and retrieve the historical events of a Diplomacy game phase by phase, including messages, plans, orders, and results.
**Status:** Fully implemented and operational.

#### 1.2. `map_utils.py` (COMPLETE BUT NOT INTEGRATED)
**Goal:** To provide graph-based map analysis and pathfinding for strategic decision-making.
**Status:** BFS search algorithms implemented but not integrated into planning/order generation.

**Key Components:**
* `DiplomacyGraph`: Represents map territory connectivity with support for unit-specific movement rules (Army vs Fleet).
* `bfs_shortest_path`: Finds shortest path from a starting territory to any territory matching criteria.
* `bfs_nearest_adjacent`: Finds shortest path to a territory adjacent to any territory in a target set.
* `build_diplomacy_graph`: Constructs the graph representation from the game map.

#### 1.3. `phase_summary.py` (COMPLETE, in lm_game.py)
**Goal:** Generate concise, structured summaries of each game phase for post-game analysis.
**Status:** Fully implemented via `phase_summary_callback` in `lm_game.py`.

**Key Components:**
* Structured summaries with:
  * Current board state (sorted by supply center count)
  * Successful moves by power
  * Unsuccessful moves by power with failure reasons
  * Optional sections for other move types

#### 1.4. `agent.py` (COMPLETE)
**Goal:** To maintain stateful agent representation with personality, goals, and relationships.
**Status:** Fully implemented and integrated with planning/negotiation workflows.

**Key Components:**
* `DiplomacyAgent` class with:
  * `power_name`: The power this agent represents
  * `personality`: Agent's personality profile
  * `goals`: List of strategic goals
  * `relationships`: Dict of relationships with other powers
  * `private_journal`: List of internal thoughts/reflections
  * `_extract_json_from_text`: Robust JSON extraction from LLM responses
  * `initialize_agent_state`: Sets initial goals and relationships
  * `analyze_phase_and_update_state`: Updates goals and relationships based on game events
  * Methods for plan generation, updating goals, and updating relationships

**Integration Points:**
* Connected to context generation in `clients.py`
* Influences planning and negotiations through goals and relationships
* Case-insensitive validation of LLM-provided power names and relationship statuses
* Robust error recovery with fallback defaults when LLM responses fail to parse

#### 1.5. `negotiations.py` (COMPLETE)
**Goal:** To orchestrate the communication phase among active AI powers.
**Status:** Fully implemented and integrated with DiplomacyAgent state.
**Note:** Relies heavily on `prompts/conversation_instructions.txt` to guide LLMs in generating correctly formatted messages for parsing.

#### 1.6. `planning.py` (COMPLETE)
**Goal:** To allow each AI power to generate a high-level strategic directive or plan.
**Status:** Fully implemented and integrated with DiplomacyAgent state.

#### 1.7. `utils.py` (COMPLETE)
**Goal:** To provide common utility functions used across other AI diplomacy modules.
**Status:** Fully implemented.

#### 1.8. `clients.py` (COMPLETE)
**Goal:** To abstract and manage interactions with various LLM APIs.
**Status:** Fully implemented with agent state integration.
**Note:** Uses various files in `prompts/` (e.g., `context_prompt.txt`, `order_instructions.txt`, `conversation_instructions.txt`) to structure LLM requests and define expected output formats. Ensuring these instruction files are present and correct is critical for reliable operation, especially for parsing structured data like orders or messages.

### PARTIALLY IMPLEMENTED MODULES:

#### 1.9. `utils.py` (COMPLETE)
**Goal:** To provide common utility functions used across other AI diplomacy modules.
**Status:** Fully implemented.

#### 1.10. `clients.py` (COMPLETE BUT NEEDS EXTENSION)
**Goal:** To abstract and manage interactions with various LLM APIs.
**Status:** Works, but needs extension to incorporate agent state into context.

---

## 2. Integration Points

The following connections have been established:

1. **Agent State → Context Building**
   * `BaseModelClient.build_context_prompt` incorporates agent's personality, goals, and relationships
   * Modified prompt templates include sections for agent state

2. **Agent State → Negotiations**
   * Agent's personality, goals, and relationships influence message generation
   * Relationships are updated based on negotiation context and results

3. **Robust LLM Interaction**
   * Implemented multi-strategy JSON extraction to handle various LLM response formats
   * Added case-insensitive validation for power names and relationship statuses
   * Created fallback mechanisms for all LLM interactions

4. **Error Recovery**
   * Added defensive programming throughout agent state updates
   * Implemented progressive fallback strategies for parsing LLM outputs
   * Used intelligent defaults to maintain consistent agent state

---

## 3. Future Work

1. **Map Analysis Integration**
   * Create utility functions to leverage BFS search for common strategic questions
   * Integrate these into planning phase
   * Add territory analysis to order generation context

2. **Enhanced Agent Adaptation**
   * Develop more sophisticated goal updating strategies based on game events
   * Implement memory of betrayals/alliances across multiple phases
   * Create feedback loops between relationship states and planning priorities

3. **UI Integration**
   * Expose agent states (goals, relationships) in the game visualization
   * Show evolving relationships between powers graphically
   * Integrate agent journal entries as commentary

---

## 4. Dependency Map (Updated)

```ascii
+-----------------+       +-------------------+       +-----------------+
| negotiations.py | ----> |    clients.py     | <---- |   planning.py   |
+-----------------+       +-------------------+       +-----------------+
        |                       ^   |   ^                    |
        |                       |   |   |                    |
        v                       |   v   |                    v
+-----------------+             | +-----+          +-----------------+
| game_history.py | <-----------+ |                |    agent.py     |
+-----------------+               |                +-----------------+
        ^                         |                        |
        |                         v                        v
        |                  +--------------+        +--------------+
        +------------------+    utils.py  | <----- | map_utils.py |
                           +--------------+        +--------------+
```

**Current Integration Status:**
* `agent.py` is fully implemented and integrated with other modules
* State updates work reliably between phases
* Robust JSON parsing and case-insensitive validation ensure smooth operation
* `map_utils.py` is implemented but not yet fully leveraged for strategic planning

**Asynchronous API Calls (Implemented April 2025)**
- Successfully refactored major LLM interaction points to use asynchronous patterns (`async`/`await`, `asyncio.gather`).
- Utilized async client libraries (`AsyncOpenAI`, `AsyncAnthropic`, `generate_content_async` for Gemini).
- Refactored components:
    - `DiplomacyAgent.initialize_agent_state`
    - `negotiations.conduct_negotiations` (message generation)
    - `utils.get_valid_orders` (order generation)
    - `DiplomacyAgent.analyze_phase_and_update_state`
- This significantly improves performance by allowing concurrent API calls instead of sequential ones.
- Replaced `concurrent.futures.ThreadPoolExecutor` with `asyncio.gather` for managing concurrent async tasks.

```
