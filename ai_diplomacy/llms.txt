# AI Diplomacy Codebase Analysis (Core Logic Modules) - Updated

This document provides an analysis of key Python modules within the `ai_diplomacy` package, focusing on their roles, functions, interdependencies, and implementation status.

---

## 1. Module Status

### COMPLETED MODULES:

#### 1.1. `game_history.py` (COMPLETE)
**Goal:** To structure, store, and retrieve the historical events of a Diplomacy game phase by phase, including messages, plans, orders, and results.
**Status:** Fully implemented and operational.

*Key Components:*
* `DiplomacyGraph`: Represents map territory connectivity with support for unit-specific movement rules (Army vs Fleet).
* `bfs_shortest_path`: Finds shortest path from a starting territory to any territory matching criteria.
* `bfs_nearest_adjacent`: Finds shortest path to a territory adjacent to any territory in a target set.
* `build_diplomacy_graph`: Constructs the graph representation from the game map.

#### 1.3. `phase_summary.py` (COMPLETE, in lm_game.py)
**Goal:** Generate concise, structured summaries of each game phase for post-game analysis.
**Status:** Fully implemented via `phase_summary_callback` in `lm_game.py`.

**Key Components:**
* Structured summaries with:
  * Current board state (sorted by supply center count)
  * Successful moves by power
  * Unsuccessful moves by power with failure reasons
  * Optional sections for other move types

#### 1.4. `agent.py` (COMPLETE)
**Goal:** To maintain stateful agent representation with personality, goals, and relationships.
**Status:** Fully implemented and integrated with planning/negotiation workflows. Initialization of goals and relationships via LLM is now handled by `initialization.py`.

**Key Components:**
* `DiplomacyAgent` class with:
  * `power_name`: The power this agent represents
  * `personality`: Agent's personality profile (though less emphasized now, system prompts per power exist)
  * `goals`: List of strategic goals, initially populated by `initialization.py` or constructor.
  * `relationships`: Dict of relationships with other powers, initially populated by `initialization.py` or constructor.
  * `private_journal`: List of internal thoughts/reflections (less structured).
  * `private_diary`: List of structured, phase-prefixed summaries (negotiations, intents, orders) for concise historical context provided to LLMs.
  * `_extract_json_from_text`: Robust JSON extraction from LLM responses
  * `analyze_phase_and_update_state`: Updates goals and relationships based on game events.
  * Methods for plan generation, updating goals, and updating relationships.

**Integration Points:**
* Connected to context generation in `clients.py` (private diary provides summarized history)
* Influences planning and negotiations through goals and relationships
* Case-insensitive validation of LLM-provided power names and relationship statuses
* Robust error recovery with fallback defaults when LLM responses fail to parse

#### 1.5. `negotiations.py` (COMPLETE)
**Goal:** To orchestrate the communication phase among active AI powers.
**Status:** Fully implemented and integrated with DiplomacyAgent state.
**Note:** Relies heavily on `prompts/conversation_instructions.txt` to guide LLMs in generating correctly formatted messages for parsing.

#### 1.6. `planning.py` (COMPLETE)
**Goal:** To allow each AI power to generate a high-level strategic directive or plan.
**Status:** Fully implemented and integrated with DiplomacyAgent state.

#### 1.7. `utils.py` (COMPLETE)
**Goal:** To provide common utility functions used across other AI diplomacy modules.
**Status:** Fully implemented.

#### 1.8. `clients.py` (COMPLETE)
**Goal:** To abstract and manage interactions with various LLM APIs.
**Status:** Fully implemented with agent state integration (including personality, goals, relationships, and the new `private_diary` for summarized history). It now also leverages `possible_order_context.py` for richer order details in prompts.
**Note:** Uses various files in `prompts/` (e.g., `context_prompt.txt`, `order_instructions.txt`, `negotiation_diary_prompt.txt`, `order_diary_prompt.txt`) to structure LLM requests. `context_prompt.txt` has been updated to use `agent_private_diary` for history and a more structured `{possible_orders}` section generated by `possible_order_context.generate_rich_order_context`.

#### 1.9. `initialization.py` (NEWLY ADDED & COMPLETE)
**Goal:** To perform the initial LLM-driven setup of an agent's goals and relationships at the very start of the game (Spring 1901).
**Status:** Fully implemented and integrated into `lm_game.py`.

**Key Components:**
* `initialize_agent_state_ext(agent: DiplomacyAgent, game: Game, game_history: GameHistory, log_file_path: str)`: An asynchronous function that:
    *   Constructs a specific prompt tailored for Spring 1901, asking for initial goals and relationships.
    *   Utilizes the agent's client (`agent.client`) and the `run_llm_and_log` utility for the LLM interaction.
    *   Parses the JSON response using the agent's `_extract_json_from_text` method.
    *   Directly updates the `agent.goals` and `agent.relationships` attributes with the LLM's suggestions or defaults if parsing fails.

**Integration Points:**
*   Called once per agent from `lm_game.py` immediately after the `DiplomacyAgent` object is instantiated and before the main game loop begins.

---

## 2. Integration Points

The following connections have been established:

1. **Initial Agent Setup (New)**:
   * `lm_game.py` calls `initialization.py`'s `initialize_agent_state_ext` for each agent. This function uses an LLM call to populate the agent's initial `goals` and `relationships` before the main game loop and other agent interactions commence.

2. **Agent State → Context Building**
   * `BaseModelClient.build_context_prompt` in `clients.py` incorporates the agent's current `goals`, `relationships`, and the concise `agent_private_diary` for historical context.
   * It also calls `possible_order_context.generate_rich_order_context` to provide a detailed and strategically relevant breakdown of possible orders, replacing a simpler list.
   * `prompts/context_prompt.txt` is formatted to accept these inputs, including the structured possible orders and the agent's private diary.

3. **Agent State → Negotiations**
   * Agent's personality, goals, and relationships influence message generation
   * Relationships are updated based on negotiation context and results

4. **Robust LLM Interaction**
   * Implemented multi-strategy JSON extraction to handle various LLM response formats
   * Added case-insensitive validation for power names and relationship statuses
   * Created fallback mechanisms for all LLM interactions

5. **Error Recovery**
   * Added defensive programming throughout agent state updates
   * Implemented progressive fallback strategies for parsing LLM outputs
   * Used intelligent defaults to maintain consistent agent state

---

## 3. Future Work

1. **Map Analysis Integration**
   * Create utility functions to leverage BFS search for common strategic questions
   * Integrate these into planning phase
   * Add territory analysis to order generation context

2. **Enhanced Agent Adaptation**
   * Develop more sophisticated goal updating strategies based on game events
   * Implement memory of betrayals/alliances across multiple phases
   * Create feedback loops between relationship states and planning priorities

3. **UI Integration**
   * Expose agent states (goals, relationships) in the game visualization
   * Show evolving relationships between powers graphically
   * Integrate agent journal entries as commentary

---

## 4. Dependency Map (Updated)

```ascii
+-----------------+       +-------------------+       +-----------------+
| negotiations.py | ----> |    clients.py     | <---- |   planning.py   |
+-----------------+       +-------------------+       +-----------------+
        |                       ^   |   ^                    |
        |                       |   |   |                    |
        v                       |   v   |                    v
+-----------------+             | +-----+          +-----------------+
| game_history.py | <-----------+ |                |    agent.py     |
+-----------------+               |                +-----------------+
        ^                         |                        |
        |                         v                        |
        |                  +--------------+                |
        +------------------+    utils.py  | <---------------
                           +--------------+        
```

**Current Integration Status:**
* `agent.py` is fully implemented and integrated with other modules
* State updates work reliably between phases
* Robust JSON parsing and case-insensitive validation ensure smooth operation

**Asynchronous API Calls (Implemented April 2025)**
- Successfully refactored major LLM interaction points to use asynchronous patterns (`async`/`await`, `asyncio.gather`).
- Utilized async client libraries (`AsyncOpenAI`, `AsyncAnthropic`, `generate_content_async` for Gemini).
- Refactored components:
    - `initialization.initialize_agent_state_ext` (replaces `DiplomacyAgent.initialize_agent_state`)
    - `negotiations.conduct_negotiations` (message generation)
    - `utils.get_valid_orders` (order generation)
    - `DiplomacyAgent.analyze_phase_and_update_state`
    - `DiplomacyAgent.generate_negotiation_diary_entry`
    - `DiplomacyAgent.generate_order_diary_entry`
    - `DiplomacyAgent.decide_builds_or_disbands`
    - `planning.planning_phase`
- This significantly improves performance by allowing concurrent API calls instead of sequential ones.
- Replaced `concurrent.futures.ThreadPoolExecutor` with `asyncio.gather` for managing concurrent async tasks.
